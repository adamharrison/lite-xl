name: CI

on:
  push:
  pull_request:
    branches:
      - '*'
  workflow_dispatch:
    inputs:
      version:
        description: Release Version
        required: false

# Builds & Uploads:
# * Linux x86_64 Portable
# * Linux App Image
# * Mac Universal Portable
# * Mac Universal DMG
# * Windows x86_64 Portable
# * Windows x86_64 Installer
jobs:
  # Checks to see if we have an input, and stamps that onto the repo.
  # Determines if this is a release, and determines the official ref.
  version:
    name: Compute Version & Check for Release
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      release: ${{ steps.check_release.outputs.release }}
      ref: ${{ steps.check_release.outputs.ref }}
    steps:
      - name: Update Tag
        uses: richardsimko/update-tag@v1
        if: ${{ github.event.inputs.version }}
        with:
          tag_name: ${{ github.event.inputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      - name: Check Release
        id: check_release
        run: |
          export REF=`git describe --match v[0-9]* HEAD --tags`
          echo "Build Version: $REF"
          [[ "$REF" != "" ]] && echo "ref=$REF" >> $GITHUB_OUTPUT
          if [[ `git describe --exact-match --match v[0-9]* HEAD --tags` ]]; then
            echo "release=$REF" >> $GITHUB_OUTPUT
            echo "Release Version: $REF"
          fi
          
  build:
    name: Build
    needs: [version]
    strategy:
      matrix:
        config:
          - { runner: ubuntu-latest, package: "appimage",  builder: 'docker run -v .:/build -w /build ghcr.io/lite-xl/lite-xl-build-box-manylinux:v3.0.2 -- /entrypoint.sh'  }
          - { runner: macos-13,                            type: bundle   } # macos-13 uses x86_64
          - { runner: macos-13,                            type: portable } # macos-13 uses x86_64
          - { runner: macos-14,                            type: bundle   } # macos-14 / latest uses M1
          - { runner: macos-14,                            type: portable } # macos-14 / latest uses M1
          - { runner: windows-2019,  package: "innosetup", shell: "msys2 {0}", archiver: "zip -r", extension: ".zip" } #"
    runs-on: ${{ matrix.config.runner }}
    defaults:
      run:
        shell: ${{ matrix.config.shell || 'bash' }}
    steps:
      - uses: msys2/setup-msys2@v2
        if: ${{ contains(matrix.config.runner, 'windows') }}
        with: { msystem: MINGW64 }
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Python Setup
        uses: actions/setup-python@v5
        with: { python-version: "3.11" }
      - name: Setup Environment Variables
        run: source scripts/common.sh && echo "TUPLE=$(get_platform_tuple)" >> $GITHUB_ENV
      - name: Install Dependencies
        run: scripts/install-dependencies.sh
      - name: Build
        run: ${{ matrix.config.builder || 'bash' }} scripts/build.sh -U --addons --debug --forcefallback --${{ matrix.config.type || 'portable' }} -b build
      - name: Package ${{ matrix.config.package }}
        if: ${{ matrix.config.package }}
        run: ${{ matrix.config.builder || 'bash' }} scripts/package-${{ matrix.config.package }}.sh --debug --version ${{ needs.version.outputs.ref }} -b build
      - name: Package Portable
        run: cd build && ${{ matrix.config.archiver || 'tar -czvf' }} ../lite-xl-${{ needs.version.outputs.ref }}-${{ env.TUPLE }}-${{ matrix.config.type || 'portable' }}${{ matrix.config.extension || '.tar.gz' }} lite-xl
      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: lite-xl-${{ needs.version.outputs.ref }}-${{ env.TUPLE }}-${{ matrix.config.type || 'portable' }}
          path: |
            *.tar.gz
            *.exe
            *.zip
            *.AppImage

  build_macos_universal:
    name: Build macOS Universal Binaries
    needs: [version, build]
    runs-on: macos-14
    steps:
      - name: System Information
        run: |
          system_profiler SPSoftwareDataType
          bash --version
          gcc -v
          xcodebuild -version
          
      - uses: actions/checkout@v4
      
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: '*darwin*'

      - name: Python Setup
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dmgbuild
        run: pip install dmgbuild

      - name: Create Universal Binaries
        run: |
          find .
          for TYPE in bundle portable; do
            mkdir -p lite-xl-${{ needs.version.outputs.ref }}-universal-darwin-$TYPE/lite-xl
            tar -zxvf -C lite-xl-${{ needs.version.outputs.ref }}-x86_64-darwin-$TYPE '*.tar.gz' && tar -zxvf -C lite-xl-${{ needs.version.outputs.ref }}-aarch64-darwin-$TYPE '*.tar.gz'
            cp -r lite-xl-${{ needs.version.outputs.ref }}-x86_64-darwin-$TYPE/lite-xl/data lite-xl-${{ needs.version.outputs.ref }}-universal-darwsin-$TYPE/lite-xl/data
            lipo -create -output lite-xl-${{ needs.version.outputs.ref }}-universal-darwin-$TYPE/lite-xl/lite-xl lite-xl-${{ needs.version.outputs.ref }}-*-darwin-$TYPE/lite-xl/lite-xl
          done
          
      - name: Create DMG Image
        run: scripts/package-dmg.sh lite-xl-${{ needs.version.outputs.ref }}-universal-darwin-bundle $lite-xl-${{ needs.version.outputs.ref }}-universal-darwin
        
      - name: Create Universal Portable
        run: tar -zcvf lite-xl-${{ needs.version.outputs.ref }}-universal-darwin-portable.tar.gz -C lite-xl-${{ needs.version.outputs.ref }}-universal-drawin-portable .

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: darwin Images ${{ matrix.config.type }} (Universal)
          path: |
            *.dmg
            *.tar.gz

  release:
    name: Create Release
    needs: [version, build, build_macos_universal]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: lite-xl-*portable
          path: .
      - name: Versioned Release
        uses: softprops/action-gh-release@v1
        if: ${{ needs.version.outputs.release }}
        with:
          tag_name: ${{ needs.version.outputs.release }}
          name: Lite XL ${{ needs.version.outputs.release }}
          draft: true
          body_path: changelog.md
          generate_release_notes: true
          files: |
            */*.tar.gz
            */*.zip
            */*.exe
            */*.dmg
            */*.AppImage
      - name: Update Tag
        uses: richardsimko/update-tag@v1
        if: github.ref == 'refs/heads/master'
        with:
          tag_name: continuous
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Continuous Release
        uses: softprops/action-gh-release@v1
        if: github.ref == 'refs/heads/master'
        with:
          name: Lite XL Continuous Release
          tag_name: continuous
          prerelease: true
          files: |
            */*.tar.gz
            */*.zip
            */*.exe
            */*.dmg
            */*.AppImage
